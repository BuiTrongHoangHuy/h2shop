"use client";

import { ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight, Eye, Download, Trash2, TrendingUp, Users, Package, ShoppingCart, DollarSign, AlertTriangle } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Report } from "@/services/api/reportApi";

interface ReportTableProps {
  reports: Report[];
  currentPage: number;
  onPageChange: (page: number) => void;
  onViewDetails: (report: Report) => void;
  onExport: (id: string, format: 'pdf' | 'excel' | 'csv') => void;
  onDelete: (id: string) => void;
  pagination: {
    total: number;
    page: number;
    limit: number;
    totalPages: number;
  };
}

export default function ReportTable({
  reports,
  currentPage,
  onPageChange,
  onViewDetails,
  onExport,
  onDelete,
  pagination,
}: ReportTableProps) {
  const { total, totalPages } = pagination;

  const formatDateTime = (dateString: string) => {
    return new Date(dateString).toLocaleString("vi-VN", {
      year: "numeric",
      month: "2-digit",
      day: "2-digit",
      hour: "2-digit",
      minute: "2-digit",
    });
  };

  const handleExport = (report: Report, format: 'pdf' | 'excel' | 'csv') => {
    onExport(report.id, format);
  };

  const handleDelete = (report: Report) => {
    if (window.confirm(`Are you sure you want to delete "${report.title}"?`)) {
      onDelete(report.id);
    }
  };

  return (
    <div className="flex-1 flex flex-col">
      <div className="flex-1 overflow-auto">
        <table className="w-full">
          <thead className="bg-gray-50 sticky top-0">
            <tr>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Report</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Type</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Generated</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Generated By</th>
              <th className="px-4 py-3 text-left text-sm font-medium text-gray-900">Actions</th>
            </tr>
          </thead>
          <tbody>
            {reports.length === 0 ? (
              <tr>
                <td colSpan={5} className="px-4 py-8 text-center text-gray-500">
                  <div className="flex flex-col items-center">
                    <TrendingUp className="h-12 w-12 text-gray-400 mb-2" />
                    <p>No reports found</p>
                    <p className="text-sm">Try adjusting your search or filters</p>
                  </div>
                </td>
              </tr>
            ) : (
              reports.map((report) => (
                <tr key={report.id} className="border-b border-gray-200 hover:bg-gray-50">
                  <td className="px-4 py-3">
                    <div className="text-sm">
                      <div className="font-medium text-gray-900">{report.title}</div>
{/*
                      <div className="text-gray-500 line-clamp-2">{report.description}</div>
*/}
                    </div>
                  </td>
                  <td className="px-4 py-3">
                    {report.reportType}
                  </td>
                  <td className="px-4 py-3 text-sm text-gray-900">
                    {formatDateTime(report.generatedAt ? new Date(report.generatedAt).toString() : new Date().toString())}
                  </td>
                  <td className="px-4 py-3 text-sm text-gray-900">
                    {report.generatedBy || 'System'}
                  </td>
                  <td className="px-4 py-3">
                    <div className="flex items-center space-x-2">
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => onViewDetails(report)}
                        className="flex items-center space-x-1 cursor-pointer "
                      >
                        <Eye className="h-4 w-4" />
                        <span>View</span>
                      </Button>
                      
                      {/*<div className="relative group">
                        <Button
                          variant="outline"
                          size="sm"
                          className="flex items-center space-x-1"
                        >
                          <Download className="h-4 w-4" />
                          <span>Export</span>
                        </Button>
                        <div className="absolute right-0 mt-1 w-32 bg-white border border-gray-200 rounded-md shadow-lg opacity-0 invisible group-hover:opacity-100 group-hover:visible transition-all duration-200 z-10">
                          <button
                            onClick={() => handleExport(report, 'pdf')}
                            className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          >
                            Export as PDF
                          </button>
                          <button
                            onClick={() => handleExport(report, 'excel')}
                            className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          >
                            Export as Excel
                          </button>
                          <button
                            onClick={() => handleExport(report, 'csv')}
                            className="block w-full text-left px-3 py-2 text-sm text-gray-700 hover:bg-gray-100"
                          >
                            Export as CSV
                          </button>
                        </div>
                      </div>*/}
                      
                      <Button
                        variant="outline"
                        size="sm"
                        onClick={() => handleDelete(report)}
                        className="flex items-center space-x-1 text-red-600 hover:text-red-700 cursor-pointer"
                      >
                        <Trash2 className="h-4 w-4" />
                        <span>Delete</span>
                      </Button>
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>

      {/* Pagination */}
      {totalPages > 1 && (
        <div className="flex items-center justify-center space-x-1 py-4 border-t">
          <button
            onClick={() => onPageChange(1)}
            disabled={currentPage === 1}
            className="p-2 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronsLeft className="h-4 w-4" />
          </button>

          <button
            onClick={() => onPageChange(Math.max(1, currentPage - 1))}
            disabled={currentPage === 1}
            className="p-2 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronLeft className="h-4 w-4" />
          </button>

          {[...Array(Math.min(5, totalPages))].map((_, index) => {
            const page = Math.max(1, Math.min(totalPages - 4, currentPage - 2)) + index;
            if (page > totalPages) return null;
            
            return (
              <button
                key={page}
                onClick={() => onPageChange(page)}
                className={`px-3 py-1 rounded-md text-sm min-w-[32px] ${
                  currentPage === page 
                    ? "bg-orange-500 text-white"
                    : "hover:bg-gray-100 text-gray-700"
                }`}
              >
                {page}
              </button>
            );
          })}

          <button
            onClick={() => onPageChange(Math.min(totalPages, currentPage + 1))}
            disabled={currentPage === totalPages}
            className="p-2 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronRight className="h-4 w-4" />
          </button>

          <button
            onClick={() => onPageChange(totalPages)}
            disabled={currentPage === totalPages}
            className="p-2 rounded-md hover:bg-gray-100 disabled:opacity-50 disabled:cursor-not-allowed"
          >
            <ChevronsRight className="h-4 w-4" />
          </button>
        </div>
      )}
    </div>
  );
} 